# -*- coding: utf-8 -*-

from core.utilities import plot_forecasts, calc_test_mse

class Forecaster(object):
    """
    An abstract class for forecasting time series. All the methods
    are implemented, except for `__init__` and `make_forecasts`, which
    should be implemented in the derived class.

    # Constructor arguments:

    * train           - dataframe with training data
    * test            - dataframe with test data
    * window          - window size in time stamps to lookup in the past
    * future          - window size in time stamps to forecast in the future
    * train_selection - specifies which part of the training set to use
    * test_selection  - specifies which part of the test set to forecast

    # Note:

    For our dataset, 12 time stamps represent 1 hour of data. The default
    window size passed to the constructor is 12*5 (i.e. 5 hours).
    """
    def __init__(self, train, test, window=12*5, future=12*3,
                 train_selection="all", test_selection="hourly"):
        raise NotImplementedError("Should have implemented this")

    def make_forecasts(self):
        """
        TODO: Add docstring
        """
        raise NotImplementedError("Should have implemented this")

    def plot_test(self):
        """
        Plot the forecasts generated by `make_forecasts` on top of the test data.
        """
        plot_forecasts(self.test, self.forecasts)

    def calc_mse(self):
        """
        Compute mean squared error on test set.
        """
        return calc_test_mse(self.test, self.forecasts)
